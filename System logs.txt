1)DES:
key = input("Enter key: ")
data = input("Enter the data: ")


key = (key * (len(data) // len(key) + 1))[:len(data)]

encrypted = ""
for i in range(len(data)):
    encrypted += chr((ord(data[i]) + ord(key[i])) % 256)

decrypted = ""
for i in range(len(encrypted)):
    decrypted += chr((ord(encrypted[i]) - ord(key[i])) % 256)

print("Encrypted:", encrypted)
print("Decrypted:", decrypted)

2)AES Algorithm:
def xor_encrypt_decrypt(key, data):
    key = (key * (len(data) // len(key) + 1))[:len(data)]
    result = ""
    for i in range(len(data)):
        result += chr(ord(data[i]) ^ ord(key[i]))
    return result
key = input("Enter a key: ")
data = input("Enter the data: ")
encrypted = xor_encrypt_decrypt(key, data)
decrypted = xor_encrypt_decrypt(key, encrypted)
print("Encrypted (hex):", encrypted.encode('utf-8').hex())
print("Decrypted:", decrypted)

3)RSA ALGORITHM:

from math import gcd

def RSA(p: int, q: int, message: int):
    n = p * q
    t = (p - 1) * (q - 1)
    e = 0
    for i in range(2, t):
        if gcd(i, t) == 1:
            e = i
            break
    if e== 0:
        print("Failed to find an appropriate value for e.")
    d = 0
    for j in range(1, t):
        if (j * e% t) == 1:
            d = j
            break
    if d ==0:
        print("Failed to find an appropriate value for d.")
    c = (message^e)%n
    print(f"Encrypted message is: {c}")
    mes = (c^d)%n
    print(f"Decrypted message is: {mes}")
# Example usage
RSA(p=7, q=11, message=100)

4)RC4 ALGORITHM:

def rc4(data, key):
    s, j = list(range(256)), 0
    for i in range(256):
        j = (j + s[i] + key[i % len(key)]) % 256
        s[i], s[j] = s[j], s[i]
    i = j = 0
    return bytes([byte ^ s[(s[(i := (i + 1) % 256)] + s[(j := (j + s[i]) % 256)]) % 256] for byte in data])

# Example usage
rc4_key = b"key123"
plaintext = b"hellokey"  # Blowfish requires 8-byte blocks

# RC4 encryption and decryption
rc4_enc = rc4(plaintext, rc4_key)
print("RC4 Encrypted:", rc4_enc.hex())
print("RC4 Decrypted:", rc4(rc4_enc, rc4_key).decode())

5) CAESAR CIPHER:
def caesar_encrypt(plaintext, shift):
    result = ""
    for char in plaintext:
        if char.isalpha():
            shift_base = 65 if char.isupper() else 97
            result += chr((ord(char) - shift_base + shift) % 26 + shift_base)
        else:
            result += char
    return result

text = input("Enter text to encrypt: ")
shift = int(input("Enter shift value: "))
encrypted = caesar_encrypt(text, shift)
print("Encrypted text:", encrypted)

6)DIFFIE-HELLMAN EXCHANGE ALGORITHM:
import math
P = 23
print("The value of P:", P)
G = 9
print("The value of G:", G)
a = 5
print("The private key a for Alice:", a)
b = 3
print("The private key b for Bob:", b)
x = math.pow(G,a)%P
y = math.pow(G,b)%P
ka = math.pow(y,a)%P # Secret key for Alice
kb = math.pow(x,b)%P# Secret key for Bob
print("Secret key for Alice is:",ka)
print("Secret key for Bob is:",kb)

7)BLOWFISH:

key = input("Enter key: ")
data = input("Enter the data: ")
if not (4 <= len(key) <= 56):
    print("Key length must be between 4 and 56 characters.")
    exit()
key = (key * (len(data) // len(key) + 1))[:len(data)]
encrypted = ""
for i in range(len(data)):
    encrypted += chr((ord(data[i]) + ord(key[i])) % 256)
decrypted = ""
for i in range(len(encrypted)):
    decrypted += chr((ord(encrypted[i]) - ord(key[i])) % 256)
print("Encrypted:", encrypted.encode('utf-8').hex())  
print("Decrypted:", decrypted)

8)PLAYFAIR:
def generate_key_matrix(key):
    # Remove duplicates from the key
    key = "".join(dict.fromkeys(key.replace("J", "I").upper()))
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    matrix = []
    used = set(key)
    
    # Fill the key matrix with the key characters
    for char in key:
        matrix.append(char)
    
    # Add remaining characters of the alphabet
    for char in alphabet:
        if char not in used:
            matrix.append(char)
    
    # Reshape into a 5x5 matrix
    return [matrix[i:i+5] for i in range(0, 25, 5)]


def find_position(matrix, char):
    for i, row in enumerate(matrix):
        if char in row:
            return i, row.index(char)
    return None


def prepare_text(text):
    text = text.upper().replace("J", "I").replace(" ", "")
    prepared = ""
    i = 0
    
    while i < len(text):
        char = text[i]
        prepared += char
        
        # If the next char is the same, add 'X' between them
        if i + 1 < len(text) and text[i] == text[i + 1]:
            prepared += "X"
        i += 1
    
    # Add a filler character if length is odd
    if len(prepared) % 2 != 0:
        prepared += "X"
    return prepared


def playfair_encrypt(matrix, text):
    text = prepare_text(text)
    encrypted = ""
    
    for i in range(0, len(text), 2):
        char1, char2 = text[i], text[i + 1]
        row1, col1 = find_position(matrix, char1)
        row2, col2 = find_position(matrix, char2)
        
        if row1 == row2:  # Same row
            encrypted += matrix[row1][(col1 + 1) % 5]
            encrypted += matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:  # Same column
            encrypted += matrix[(row1 + 1) % 5][col1]
            encrypted += matrix[(row2 + 1) % 5][col2]
        else:  # Rectangle swap
            encrypted += matrix[row1][col2]
            encrypted += matrix[row2][col1]
    
    return encrypted


def playfair_decrypt(matrix, text):
    decrypted = ""
    
    for i in range(0, len(text), 2):
        char1, char2 = text[i], text[i + 1]
        row1, col1 = find_position(matrix, char1)
        row2, col2 = find_position(matrix, char2)
        
        if row1 == row2:  # Same row
            decrypted += matrix[row1][(col1 - 1) % 5]
            decrypted += matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:  # Same column
            decrypted += matrix[(row1 - 1) % 5][col1]
            decrypted += matrix[(row2 - 1) % 5][col2]
        else:  # Rectangle swap
            decrypted += matrix[row1][col2]
            decrypted += matrix[row2][col1]
    
    return decrypted


# Example usage
key = input("Enter key: ")
text = input("Enter text to encrypt: ")

matrix = generate_key_matrix(key)
print("\nKey Matrix:")
for row in matrix:
    print(row)

encrypted_text = playfair_encrypt(matrix, text)
print("\nEncrypted Text:", encrypted_text)

decrypted_text = playfair_decrypt(matrix, encrypted_text)
print("\nDecrypted Text:", decrypted_text)

9)IP TABLES:
sudo apt-get update
sudp apt install ufw
sudo ufw status
sudo ufw enable(if status is inactive)
sudo ufw default deny incoming
sudo ufw default deny outgoing
sudo ufw default allow incoming
sudo ufw default allow outgoing
sudo apt install iptables
iptables -L
sudo iptables -A INPUT -s [IP ADDRESS] -j ACCEPT
sudo iptables -A INPUT -s [IP ADDRESS] -j DROP

10)SHA-1:

import hashlib
def sha1_hash(text):
    message=text.encode('utf-8')
    sha1=hashlib.sha1()
    sha1.update(message)
    message_digest=sha1.hexdigest()
    return message_digest
input=input("Enter your input: ")
digest=sha1_hash(input)
print(f"SHA-1 digest of '{input} : {digest}")

11)MD-5:

import hashlib

def compute_md5(input_string):
    md5_hash = hashlib.md5()
    
    md5_hash.update(input_string.encode('utf-8'))
    
    return md5_hash.hexdigest()

data = input("Enter the string to hash using MD5: ")
result = compute_md5(data)
print(f"MD5 hash of '{data}': {result}")